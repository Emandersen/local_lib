#!/usr/bin/env node


const fs = require('fs');
const configFileName = './config.env';
const defaultConfig = 'PORT=3000\nMONGODB_USER=Database_username\nMONGODB_PASS=database_password\n MONGODB_COLLECTION=collection_name\n';




// Load environment variables from .secret.env

try {
 
const env = fs.readFileSync(configFileName, { encoding: 'utf8', flag: 'r' });
const lines = env.split('\n');

for (let line of lines) {
  if (line) {
    const [key, ...valueParts] = line.split('=');
    const value = valueParts.join('=');
    process.env[key] = value;
  }
  }
  console.log('Environment variables loaded from ' + configFileName);
} catch (err) {
  fs.writeFileSync(configFileName, '', { encoding: 'utf8', flag: 'w' });
  fs.appendFileSync(configFileName, defaultConfig, { encoding: 'utf8', flag: 'a' });
  console.log('No .' + configFileName + ' file found - config file is required to run the app.');
  console.log('Please fill in the config.env file and restart the app.')
  process.exit(1);
}

startup();

function startup () {
  /**
   * Module dependencies.
   */

  var app = require('../app');
  var debug = require('debug')('locallib:server');
  var http = require('http');

  /**
   * Get port from environment and store in Express.
   */

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
};
